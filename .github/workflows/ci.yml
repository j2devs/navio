name: CI/CD

on:
  push:
    branches: [ "main", "dev", "fix" ]
  pull_request:
    branches: [ "main", "dev", "fix" ]

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Lint
        run: npm run lint

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/

  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore WebApi.sln

      - name: Publish
        run: dotnet publish Presentation/WebApi.Api/WebApi.Api.csproj --configuration Release --output ./publish --no-restore

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-publish
          path: backend/publish/

  build-docker-image:
    runs-on: ubuntu-latest
    needs: [ build-frontend, build-backend ]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-publish
          path: backend/publish/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: backend-runtime
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/navio-backend:${{ github.ref_name }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: frontend-runtime
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/navio-frontend:${{ github.ref_name }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix')
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/local/bin/

      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_DEV }}

      - name: Create secrets
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER_DEV }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD_DEV }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_DEV }}
        run: |
          kubectl create secret generic app-secrets \
            --from-literal=POSTGRES_USER="${POSTGRES_USER}" \
            --from-literal=POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
            --from-literal=OPENAI_API_KEY="${OPENAI_API_KEY}" \
            --namespace=navio-dev \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          BACKEND_IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/navio-backend:${{ github.ref_name }}-${{ github.sha }}"
          FRONTEND_IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/navio-frontend:${{ github.ref_name }}-${{ github.sha }}"
          kustomize build kubernetes/overlays/dev | kubectl apply -f -
          kubectl set image deployment/navio-backend navio-backend=$BACKEND_IMAGE_TAG -n navio-dev
          kubectl set image deployment/navio-frontend navio-frontend=$FRONTEND_IMAGE_TAG -n navio-dev

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/local/bin/

      - name: Set up kubeconfig
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_STAGING }}

      - name: Create secrets
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER_STAGING }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD_STAGING }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_STAGING }}
        run: |
          kubectl create secret generic app-secrets \
            --from-literal=POSTGRES_USER="${POSTGRES_USER}" \
            --from-literal=POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
            --from-literal=OPENAI_API_KEY="${OPENAI_API_KEY}" \
            --namespace=navio-staging \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          BACKEND_IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/navio-backend:${{ github.ref_name }}-${{ github.sha }}"
          FRONTEND_IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/navio-frontend:${{ github.ref_name }}-${{ github.sha }}"
          kustomize build kubernetes/overlays/staging | kubectl apply -f -
          kubectl set image deployment/navio-backend navio-backend=$BACKEND_IMAGE_TAG -n navio-staging
          kubectl set image deployment/navio-frontend navio-frontend=$FRONTEND_IMAGE_TAG -n navio-staging
