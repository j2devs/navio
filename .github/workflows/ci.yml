name: CI/CD

on:
  push:
    branches: [ "main", "dev", "fix" ]
  pull_request:
    branches: [ "main", "dev", "fix" ]

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Lint
        run: npm run lint

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/

  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        run: dotnet publish -c Release -o out

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-publish
          path: backend/out/

  build-docker-images:
    runs-on: ubuntu-latest
    needs: [ build-frontend, build-backend ]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: backend-runtime
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/navio-backend:${{ github.ref_name }}
            ghcr.io/${{ github.repository_owner }}/navio-backend:${{ github.ref_name }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: frontend-nginx
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/navio-frontend:${{ github.ref_name }}
            ghcr.io/${{ github.repository_owner }}/navio-frontend:${{ github.ref_name }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/fix')
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_DEV }}

      - name: Create namespace
        run: |
          kubectl apply -f kubernetes/namespace.yaml

      - name: Create ConfigMap from environment variables
        env:
          NODE_ENV: production
          POSTGRES_USER: ${{ secrets.POSTGRES_USER_DEV }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD_DEV }}
          POSTGRES_HOST: db
          POSTGRES_PORT: 5432
          POSTGRES_DB: navio_db
          VITE_MAPBOX_ACCESS_KEY: ${{ secrets.VITE_MAPBOX_ACCESS_KEY_DEV }}
        run: |
          kubectl create configmap app-config \
            --from-literal=NODE_ENV="${NODE_ENV}" \
            --from-literal=POSTGRES_USER="${POSTGRES_USER}" \
            --from-literal=POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
            --from-literal=POSTGRES_HOST="${POSTGRES_HOST}" \
            --from-literal=POSTGRES_PORT="${POSTGRES_PORT}" \
            --from-literal=POSTGRES_DB="${POSTGRES_DB}" \
            --from-literal=DATABASE_CONNECTION_STRING="Host=${POSTGRES_HOST};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}" \
            --from-literal=VITE_MAPBOX_ACCESS_KEY="${VITE_MAPBOX_ACCESS_KEY}" \
            --namespace=navio-dev \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update deployment with new images
        run: |
          # Update image tags in deployment.yaml (temporary)
          sed -i "s|navio-backend:v1.0.0|ghcr.io/${{ github.repository_owner }}/navio-backend:${{ github.ref_name }}|g" kubernetes/deployment.yaml
          sed -i "s|navio-frontend:v1.0.0|ghcr.io/${{ github.repository_owner }}/navio-frontend:${{ github.ref_name }}|g" kubernetes/deployment.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/deployment.yaml

      - name: Wait for deployment to complete
        run: |
          kubectl rollout status deployment/navio-backend -n navio-dev --timeout=300s
          kubectl rollout status deployment/navio-frontend -n navio-dev --timeout=300s
          kubectl rollout status deployment/postgres -n navio-dev --timeout=300s

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_STAGING }}

      - name: Create namespace
        run: |
          # Create staging namespace if it doesn't exist
          kubectl create namespace navio-staging --dry-run=client -o yaml | kubectl apply -f -

      - name: Create ConfigMap from environment variables
        env:
          NODE_ENV: production
          POSTGRES_USER: ${{ secrets.POSTGRES_USER_STAGING }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD_STAGING }}
          POSTGRES_HOST: db
          POSTGRES_PORT: 5432
          POSTGRES_DB: navio_db
          VITE_MAPBOX_ACCESS_KEY: ${{ secrets.VITE_MAPBOX_ACCESS_KEY_STAGING }}
        run: |
          kubectl create configmap app-config \
            --from-literal=NODE_ENV="${NODE_ENV}" \
            --from-literal=POSTGRES_USER="${POSTGRES_USER}" \
            --from-literal=POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
            --from-literal=POSTGRES_HOST="${POSTGRES_HOST}" \
            --from-literal=POSTGRES_PORT="${POSTGRES_PORT}" \
            --from-literal=POSTGRES_DB="${POSTGRES_DB}" \
            --from-literal=DATABASE_CONNECTION_STRING="Host=${POSTGRES_HOST};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}" \
            --from-literal=VITE_MAPBOX_ACCESS_KEY="${VITE_MAPBOX_ACCESS_KEY}" \
            --namespace=navio-staging \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update deployment for staging
        run: |
          # Copy deployment file and update for staging
          cp kubernetes/deployment.yaml staging-deployment.yaml
          
          # Update namespace to staging
          sed -i 's/navio-dev/navio-staging/g' staging-deployment.yaml
          
          # Update image tags to use main branch images
          sed -i "s|navio-backend:v1.0.0|ghcr.io/${{ github.repository_owner }}/navio-backend:main|g" staging-deployment.yaml
          sed -i "s|navio-frontend:v1.0.0|ghcr.io/${{ github.repository_owner }}/navio-frontend:main|g" staging-deployment.yaml

      - name: Deploy to staging
        run: |
          kubectl apply -f staging-deployment.yaml

      - name: Wait for deployment to complete
        run: |
          kubectl rollout status deployment/navio-backend -n navio-staging --timeout=300s
          kubectl rollout status deployment/navio-frontend -n navio-staging --timeout=300s
          kubectl rollout status deployment/postgres -n navio-staging --timeout=300s