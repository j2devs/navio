#!/bin/bash

# Renkli output i√ßin
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë         ‚ò∏Ô∏è  Starting Navio with Kubernetes           ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

# .env dosyasƒ± kontrol√º
if [ ! -f docker/.env ]; then
    echo -e "${RED}‚ùå Error: docker/.env file not found!${NC}"
    echo -e "${YELLOW}üí° Please ensure the .env file exists inside the 'docker' directory.${NC}"
    exit 1
fi

# Kubernetes cluster kontrol√º
echo -e "${YELLOW}üîç Checking Kubernetes cluster...${NC}"
if ! kubectl cluster-info &>/dev/null; then
    echo -e "${RED}‚ùå Kubernetes cluster is not running!${NC}"
    echo -e "${YELLOW}üí° Please enable Kubernetes in Docker Desktop:${NC}"
    echo "   Settings -> Kubernetes -> Enable Kubernetes"
    exit 1
fi
echo -e "${GREEN}‚úÖ Kubernetes cluster is running${NC}"
echo ""

# Docker Compose kontrol√º
echo -e "${YELLOW}üîç Checking if Docker Compose services are running...${NC}"
if docker ps --format '{{.Names}}' | grep -q "navio-.*-dev"; then
    echo -e "${RED}‚ö†Ô∏è  Warning: Docker Compose containers are running!${NC}"
    echo -e "${YELLOW}üìç Port conflicts may occur (80, 8080, 5432)${NC}"
    echo ""
    read -p "Do you want to stop Docker Compose services first? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}üõë Stopping Docker Compose services...${NC}"
        cd docker && docker-compose --profile dev down && cd ..
        echo -e "${GREEN}‚úÖ Docker Compose stopped${NC}"
        echo ""
    fi
fi

# Yerel imajlarƒ± olu≈ütur/g√ºncelle
echo -e "${YELLOW}üèóÔ∏è  Building local images for Kubernetes...${NC}"
echo -e "${BLUE}This might take a moment...${NC}"

# √ñNEMLI: Docker Desktop Kubernetes i√ßin image'larƒ± doƒüru context'e build et
eval $(minikube docker-env 2>/dev/null) || true

docker build --target backend-runtime -t navio-backend:latest -f docker/Dockerfile .
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Backend image build failed!${NC}"
    exit 1
fi

docker build --target frontend-nginx -t navio-frontend:latest -f docker/Dockerfile .
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Frontend image build failed!${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Images built successfully${NC}"

# Image'larƒ±n varlƒ±ƒüƒ±nƒ± kontrol et
echo -e "${YELLOW}üîç Verifying images...${NC}"
if ! docker images | grep -q "navio-backend.*latest"; then
    echo -e "${RED}‚ùå Backend image not found!${NC}"
    exit 1
fi
if ! docker images | grep -q "navio-frontend.*latest"; then
    echo -e "${RED}‚ùå Frontend image not found!${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Images verified${NC}"
echo ""

# Namespace olu≈ütur
echo -e "${YELLOW}üì¶ Creating namespace...${NC}"
kubectl apply -f kubernetes/namespace.yaml
echo ""

# Mevcut deployment'larƒ± temizle (varsa)
echo -e "${YELLOW}üßπ Cleaning up old deployments...${NC}"
kubectl delete -f kubernetes/deployment.yaml --ignore-not-found=true
sleep 5
echo ""

# ConfigMap olu≈ütur/g√ºncelle
echo -e "${YELLOW}üîß Creating/updating ConfigMap...${NC}"
kubectl delete configmap app-config -n navio-dev --ignore-not-found=true
kubectl create configmap app-config --from-env-file=docker/.env -n navio-dev

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ ConfigMap created successfully${NC}"
else
    echo -e "${RED}‚ùå Failed to create ConfigMap!${NC}"
    exit 1
fi
echo ""

# Deployment'larƒ± uygula
echo -e "${YELLOW}üöÄ Applying deployments...${NC}"
kubectl apply -f kubernetes/deployment.yaml

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Deployments applied successfully${NC}"
else
    echo -e "${RED}‚ùå Failed to apply deployments!${NC}"
    exit 1
fi
echo ""

# Pod'larƒ±n hazƒ±r olmasƒ±nƒ± bekle
echo -e "${YELLOW}‚è≥ Waiting for pods to be ready...${NC}"
echo -e "${BLUE}This may take a few minutes...${NC}"
echo ""

# Her pod i√ßin ayrƒ± ayrƒ± kontrol et
echo -e "${YELLOW}Waiting for PostgreSQL...${NC}"
if kubectl wait --for=condition=ready pod -l app=postgres -n navio-dev --timeout=120s; then
    echo -e "${GREEN}‚úÖ PostgreSQL is ready${NC}"
else
    echo -e "${RED}‚ùå PostgreSQL failed to start${NC}"
    kubectl logs -n navio-dev -l app=postgres --tail=50
fi

echo -e "${YELLOW}Waiting for RabbitMQ...${NC}"
if kubectl wait --for=condition=ready pod -l app=rabbitmq -n navio-dev --timeout=120s; then
    echo -e "${GREEN}‚úÖ RabbitMQ is ready${NC}"
else
    echo -e "${RED}‚ùå RabbitMQ failed to start${NC}"
    kubectl logs -n navio-dev -l app=rabbitmq --tail=50
fi

echo -e "${YELLOW}Waiting for Backend...${NC}"
if kubectl wait --for=condition=ready pod -l app=backend -n navio-dev --timeout=300s; then
    echo -e "${GREEN}‚úÖ Backend is ready${NC}"
else
    echo -e "${RED}‚ùå Backend failed to start${NC}"
    echo -e "${YELLOW}üìã Pod status:${NC}"
    kubectl get pods -n navio-dev -l app=navio-backend
    echo -e "${YELLOW}üìã Pod events:${NC}"
    kubectl describe pod -n navio-dev -l app=navio-backend | grep -A 10 "Events:"
    echo -e "${YELLOW}üìã Recent logs:${NC}"
    kubectl logs -n navio-dev -l app=navio-backend --tail=50
fi

echo -e "${YELLOW}Waiting for Frontend...${NC}"
if kubectl wait --for=condition=ready pod -l app=frontend -n navio-dev --timeout=180s; then
    echo -e "${GREEN}‚úÖ Frontend is ready${NC}"
else
    echo -e "${RED}‚ùå Frontend failed to start${NC}"
    echo -e "${YELLOW}üìã Pod status:${NC}"
    kubectl get pods -n navio-dev -l app=navio-frontend
    echo -e "${YELLOW}üìã Pod events:${NC}"
    kubectl describe pod -n navio-dev -l app=navio-frontend | grep -A 10 "Events:"
    echo -e "${YELLOW}üìã Recent logs:${NC}"
    kubectl logs -n navio-dev -l app=navio-frontend --tail=50
fi

# T√ºm pod'larƒ±n durumunu kontrol et
ALL_READY=$(kubectl get pods -n navio-dev --no-headers 2>/dev/null | awk '{print $2}' | grep -v "1/1" | wc -l)

if [ "$ALL_READY" -eq 0 ]; then
    echo ""
    echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë         ‚úÖ All services are ready!                   ‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""

    # Pod durumlarƒ±nƒ± g√∂ster
    echo -e "${BLUE}üì¶ Pod Status:${NC}"
    kubectl get pods -n navio-dev
    echo ""

    # Service'leri g√∂ster
    echo -e "${BLUE}üåê Services:${NC}"
    kubectl get services -n navio-dev
    echo ""

    # Frontend URL'ini al
    FRONTEND_URL=$(kubectl get service frontend -n navio-dev -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
    if [ -z "$FRONTEND_URL" ]; then
        FRONTEND_URL="localhost"
    fi

    echo -e "${BLUE}üåê Access URLs:${NC}"
    echo -e "  Frontend:        ${GREEN}http://${FRONTEND_URL}${NC}"
    echo -e "  Backend:         ${GREEN}Use port-forward: kubectl port-forward -n navio-dev svc/backend 8080:8080${NC}"
    echo -e "  RabbitMQ Admin:  ${GREEN}Use port-forward: kubectl port-forward -n navio-dev svc/rabbitmq 15672:15672${NC}"
    echo ""

    echo -e "${BLUE}üìä Useful commands:${NC}"
    echo -e "  View logs:           ${YELLOW}kubectl logs -n navio-dev -l app=<app-name> -f${NC}"
    echo -e "  Get pods:            ${YELLOW}kubectl get pods -n navio-dev${NC}"
    echo -e "  Describe pod:        ${YELLOW}kubectl describe pod -n navio-dev <pod-name>${NC}"
    echo -e "  Port forward:        ${YELLOW}kubectl port-forward -n navio-dev svc/<service> <local-port>:<service-port>${NC}"
    echo -e "  Delete deployment:   ${YELLOW}kubectl delete -f kubernetes/deployment.yaml${NC}"
    echo ""

    echo -e "${YELLOW}üí° Tip: Use 'kubectl get pods -n navio-dev -w' to watch pod status${NC}"
else
    echo ""
    echo -e "${RED}‚ùå Some pods failed to become ready!${NC}"
    echo ""
    echo -e "${YELLOW}üìã Current pod status:${NC}"
    kubectl get pods -n navio-dev
    echo ""
    echo -e "${YELLOW}üí° Troubleshooting commands:${NC}"
    echo -e "  Check pod details:   ${YELLOW}kubectl describe pod -n navio-dev <pod-name>${NC}"
    echo -e "  Check pod logs:      ${YELLOW}kubectl logs -n navio-dev <pod-name>${NC}"
    echo -e "  Check events:        ${YELLOW}kubectl get events -n navio-dev --sort-by='.lastTimestamp'${NC}"
    exit 1
fi